import { google, sheets_v4 } from 'googleapis';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import type { GoogleServiceAccountCredentials } from './google-objects';

export class InventoryManagementStore {
  private sheetsClient: sheets_v4.Sheets;
  private databaseId: string;
  private document: GoogleSpreadsheet;

  constructor(
    googleServiceAccountCredentials: GoogleServiceAccountCredentials,
    googleSheetId: string
  ) {
    const auth = new google.auth.GoogleAuth({
      credentials: googleServiceAccountCredentials,
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });
    this.sheetsClient = google.sheets({ version: 'v4', auth });
    this.databaseId = googleSheetId;
    // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: googleServiceAccountCredentials.client_email,
      key: googleServiceAccountCredentials.private_key,
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });
    this.document = new GoogleSpreadsheet(googleSheetId, serviceAccountAuth);
  }

  public async saveDataAsync() {
    const exampleData = [
      {
        firstName: 'John',
        lastName: 'Doe',
        email: 'johndoe@example.com',
        phone: '+1234567890',
        plan: 'Gold Plan',
        premium_amount: 50000,
        start_policy_date: '2025-01-01',
        end_policy_date: '2026-01-01'
      }
    ];
    const values = exampleData.map((item) => [
      item.firstName,
      item.lastName,
      item.email,
      item.phone,
      item.plan,
      item.premium_amount,
      item.start_policy_date,
      item.end_policy_date
    ]);

    await this.sheetsClient.spreadsheets.values.append({
      spreadsheetId: this.databaseId,
      range: 'Sheet1!A1', // Adjust based on your sheet structure
      valueInputOption: 'RAW',
      requestBody: { values }
    });
  }

  public async workWithSheetsAsync(): Promise<boolean> {
    await this.document.loadInfo(); // loads document properties and worksheets
    console.log(this.document.title);
    await this.document.updateProperties({ title: 'renamed doc' });

    const sheet = this.document.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    console.log(sheet.title);
    console.log(sheet.rowCount);

    // adding / removing sheets
    const newSheet = await this.document.addSheet({ title: 'another sheet' });
    return true;
  }

  public async workWithRowsAsync(): Promise<boolean> {
    // if creating a new sheet, you can set the header row
    const sheet = await this.document.addSheet({
      headerValues: ['name', 'email']
    });

    // append rows
    const larryRow = await sheet.addRow({
      name: 'Larry Page',
      email: 'larry@google.com'
    });
    const moreRows = await sheet.addRows([
      { name: 'Sergey Brin', email: 'sergey@google.com' },
      { name: 'Eric Schmidt', email: 'eric@google.com' }
    ]);

    // read rows
    const rows = await sheet.getRows(); // can pass in { limit, offset }

    // read/write row values
    console.log(rows[0].get('name')); // 'Larry Page'
    rows[1].set('email', 'sergey@abc.xyz'); // update a value
    rows[2].assign({ name: 'Sundar Pichai', email: 'sundar@google.com' }); // set multiple values
    await rows[2].save(); // save updates on a row
    // await rows[2].delete(); // delete a row
    return true;
  }

  public async getLastSheetNameAsync(): Promise<string> {
    await this.document.loadInfo();
    const page =
      await this.document.sheetsByIndex[this.document.sheetCount - 1];
    return page.title;
  }

  public async addToLastSheetAsync(
    name: string,
    code: string
  ): Promise<boolean> {
    await this.document.loadInfo();
    const page =
      await this.document.sheetsByIndex[this.document.sheetCount - 1];
    await page.addRow({
      name,
      code
    });
    return true;
  }

  public async getDateOfFirstListAsync(): Promise<Date> {
    await this.document.loadInfo();
    const firstPage = await this.document.sheetsByIndex[0];
    return new Date(firstPage.title);
  }

  public async createOrUpdateNewSheetAsync(name: string): Promise<boolean> {
    await this.document.loadInfo();
    if (
      this.document.sheetCount - 1 != 0 &&
      new Date(this.document.sheetsById[0].title) < new Date(name)
    ) {
      console.log('There is a movement for the today - skip the creation');
      return true;
    }
    console.log(
      `Lets try to create a new movement for today with name: ${name}`
    );
    await this.document.addSheet({
      title: name,
      headerValues: ['code', 'item'],
      index: 0
    });
    return true;
  }
}
